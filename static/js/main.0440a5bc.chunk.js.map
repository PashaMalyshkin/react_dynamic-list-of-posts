{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comment.ts","components/PostDetails.tsx","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","memo","posts","selectedPost","onSelect","isPostSelected","post","id","className","map","title","type","cn","onClick","handleSelect","Loader","NewCommentForm","postId","onAdd","isSubmitted","setSubmitted","isLoading","onLoad","useState","name","setName","email","setEmail","commentBody","setCommentBody","allFieldsAreValid","validateField","inputValue","onSubmit","event","preventDefault","body","htmlFor","placeholder","value","onChange","target","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","addComment","comment","PostDetails","comments","setComments","isError","setIsError","setIsLoading","isFormActive","setIsFormActive","setIsSubmitted","isFormLoading","setIsFormLoading","loadComments","a","commentsFromServer","handleDelete","filteredComments","filter","Error","handleAdd","newComment","useEffect","length","href","UserSelector","userId","onSelectUserId","users","setUsers","isDropdownActive","setIsDropdownActive","selectedUser","find","user","loadUsers","useCallback","usersFromServer","state","onBlur","role","onMouseDown","App","selectedUserId","setSelectedUserId","setPosts","setSelectedPost","loadPosts","postsFromServer","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0440a5bc.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[] | null;\n  selectedPost: Post | null\n  onSelect: (post: Post | null) => void;\n}\nexport const PostsList: FC<Props> = memo(({\n  posts,\n  selectedPost,\n  onSelect,\n}) => {\n  const isPostSelected = (post: Post) => post.id === selectedPost?.id;\n  const handleSelect = (post: Post) => {\n    if (isPostSelected(post)) {\n      onSelect(null);\n    } else {\n      onSelect(post);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts?.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button is-link',\n                    { 'is-light': !isPostSelected(post) },\n                  )}\n                  onClick={() => handleSelect(post)}\n                >\n                  {isPostSelected(post) ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { FC, memo, useState } from 'react';\nimport cn from 'classnames';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  postId: number;\n  onAdd: (comment: Comment) => void;\n  isSubmitted: boolean;\n  setSubmitted: (status: boolean) => void;\n  isLoading: boolean,\n  onLoad: (status: boolean) => void;\n}\n\nexport const NewCommentForm: FC<Props> = memo(({\n  postId,\n  onAdd,\n  isSubmitted,\n  setSubmitted,\n  isLoading,\n  onLoad,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentBody, setCommentBody] = useState('');\n\n  const allFieldsAreValid = name && email && commentBody;\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setSubmitted(true);\n    onLoad(true);\n\n    if (!allFieldsAreValid) {\n      setSubmitted(true);\n      onLoad(false);\n\n      return;\n    }\n\n    const comment = {\n      id: 0,\n      postId,\n      name,\n      email,\n      body: commentBody,\n    };\n\n    onAdd(comment);\n    setCommentBody('');\n  };\n\n  const handleReset = () => {\n    setEmail('');\n    setCommentBody('');\n    setName('');\n    setSubmitted(false);\n  };\n\n  const validateField = (inputValue: string) => !inputValue && isSubmitted;\n\n  return (\n    <form\n      onSubmit={handleSubmit}\n      data-cy=\"NewCommentForm\"\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input', { 'is-danger': validateField(name) })}\n            value={name}\n            onChange={(event) => setName(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {validateField(name) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validateField(name) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input', { 'is-danger': validateField(email) })}\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {validateField(email) && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {validateField(email) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn(\n              'textarea',\n              { 'is-danger': validateField(commentBody) },\n            )}\n            value={commentBody}\n            onChange={(event) => setCommentBody(event.target.value)}\n          />\n        </div>\n\n        {validateField(commentBody) && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n});\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n\nexport const addComment = (comment: Comment) => {\n  return client.post<Comment>('/comments', comment);\n};\n","import {\n  FC, memo, useEffect, useState,\n} from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { addComment, deleteComment, getComments } from '../api/comment';\n\ninterface Props {\n  post: Post | null;\n}\nexport const PostDetails: FC<Props> = memo(({ post }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFormActive, setIsFormActive] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [isFormLoading, setIsFormLoading] = useState(false);\n\n  const loadComments = async () => {\n    try {\n      if (post) {\n        setIsLoading(true);\n        const commentsFromServer = await getComments(post.id);\n\n        setComments(commentsFromServer);\n      }\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDelete = async (commentId: number) => {\n    if (comments) {\n      const filteredComments = comments.filter(comment => (\n        comment.id !== commentId\n      ));\n\n      setComments(filteredComments);\n      try {\n        await deleteComment(commentId);\n      } catch {\n        throw new Error('Unable to delete a comment');\n      }\n    }\n  };\n\n  const handleAdd = async (comment: Comment) => {\n    try {\n      const newComment = await addComment(comment);\n\n      if (comments) {\n        setComments([...comments, newComment]);\n      }\n    } catch {\n      throw new Error('Unable to add a comment');\n    } finally {\n      setIsSubmitted(false);\n      setIsFormLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsFormActive(false);\n    setIsError(false);\n    loadComments();\n  }, [post]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post?.id}: ${post?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {isError && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              {comments && !isLoading && !isError && (\n                <>\n                  {!comments?.length ? (\n                    <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                      No comments yet\n                    </p>\n                  ) : (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n                    </>\n                  )}\n\n                  {comments?.map(comment => (\n                    <article\n                      key={comment.id}\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                    >\n                      <div className=\"message-header\">\n                        <a\n                          href={`mailto:${comment.email}`}\n                          data-cy=\"CommentAuthor\"\n                        >\n                          {comment.name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => handleDelete(comment.id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {comment.body}\n                      </div>\n                    </article>\n                  ))}\n                </>\n              )}\n\n              {(!isError && !isLoading && post?.id) && (\n                isFormActive ? (\n                  <NewCommentForm\n                    postId={post?.id}\n                    onAdd={handleAdd}\n                    isSubmitted={isSubmitted}\n                    setSubmitted={setIsSubmitted}\n                    isLoading={isFormLoading}\n                    onLoad={setIsFormLoading}\n                  />\n                ) : (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setIsFormActive(true)}\n                  >\n                    Write a comment\n                  </button>\n                )\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import {\n  FC, memo, useCallback, useEffect, useState,\n} from 'react';\nimport cn from 'classnames';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\ninterface Props {\n  userId: number | null,\n  onSelectUserId: (userId: number | null) => void;\n}\nexport const UserSelector: FC<Props> = memo(({ userId, onSelectUserId }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n\n  const selectedUser = users.find(user => user.id === userId);\n\n  const loadUsers = useCallback(async () => {\n    const usersFromServer = await getUsers();\n\n    setUsers(usersFromServer);\n  }, []);\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    if (userId) {\n      setIsDropdownActive(false);\n    }\n  }, [userId]);\n\n  const handleSelect = (id: number) => {\n    if (userId === selectedUser?.id) {\n      setIsDropdownActive(false);\n    }\n\n    onSelectUserId(id);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isDropdownActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsDropdownActive(state => !state)}\n          onBlur={() => setIsDropdownActive(false)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#${user.id}`}\n              className={cn(\n                'dropdown-item',\n                { 'is-active': userId === user.id },\n              )}\n              onClick={() => handleSelect(user.id)}\n              onMouseDown={event => event.preventDefault()}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n});\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\n\nexport const App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadPosts = useCallback(async () => {\n    try {\n      if (selectedUserId) {\n        setIsLoading(true);\n        const postsFromServer = await getPosts(selectedUserId);\n\n        setPosts(postsFromServer);\n      }\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    if (selectedUserId) {\n      setPosts(null);\n      setSelectedPost(null);\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  userId={selectedUserId}\n                  onSelectUserId={setSelectedUserId}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUserId && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {posts && (\n                  posts.length ? (\n                    <PostsList\n                      posts={posts}\n                      selectedPost={selectedPost}\n                      onSelect={setSelectedPost}\n                    />\n                  ) : (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}